---
import type { PaginateFunction } from 'astro'
import { PaginationBar } from '@/components/common/PaginationBar'
import { siteConfig } from '@/config/site'
import { getPosts } from '@/lib/fetchers'
import { type CollectionEntry } from 'astro:content'
import BlogList from './_components/BlogList.astro'
import BlogLayout from './_layout/BlogLayout.astro'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allPosts = await getPosts()
  return paginate(
    allPosts,
    {
      pageSize: siteConfig.pagination.pageSize,
    },
  )
}

const { page } = Astro.props
const posts: {
  [prop: string]: CollectionEntry<'post'>[]
} = {}

page.data.forEach((post) => {
  const year = post.data.pubDate.getFullYear()
  if (!posts[year]) {
    posts[year] = []
  }
  posts[year].push(post)
})
const years = Object.keys(posts).sort((a, b) => {
  return Number(b) - Number(a)
})
---
<BlogLayout
  title="Posts"
  description="Writing record."
>
  <div slot="right-content">
    <section class="ml-1 pt-8">
      <BlogList years={years} posts={posts} />
      {
        page.data.length && page.data.length > siteConfig.pagination.pageSize
        ? (
          <div class="mt-6">
            <PaginationBar
              currentPage={page.currentPage}
              totalPages={page.lastPage}
              baseUrl="/post/"
              client:load
            />
          </div>
        )
        : null
      }
    </section>
  </div>
</BlogLayout>
