---
import type { PaginateFunction } from 'astro'
import BlogCard from '@/components/cards/BlogCard.astro'
import { PaginationComponent } from '@/components/common/PaginationComponent'
import BlogHeader from '@/components/layout/BlogHeader.astro'
import { siteConfig } from '@/config/site'
import MainLayout from '@/layouts/MainLayout.astro'
import { getCollection } from 'astro:content'
import { type CollectionEntry } from 'astro:content'

export async function getStaticPaths({
  paginate,
}: {
  paginate: PaginateFunction
}) {
  const allPosts = await getCollection('blog')
  const uniqueCategories = [
    ...new Set(allPosts.map(post => post.data.category).flat()),
  ]

  return uniqueCategories.flatMap((category) => {
    const filteredPosts = allPosts
      .filter(post => post.data.category.includes(category))
      .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    return paginate(filteredPosts, {
      params: { category },
      pageSize: siteConfig.pagination.pageSize,
    })
  })
}

const { category } = Astro.params
const { page } = Astro.props

const posts: CollectionEntry<'blog'>[] = []
page.data.forEach((post) => {
  posts.push(post)
})
---

<MainLayout
  title={`${category} | Blog`}
  description={`All posts for ${category}`}
>
  <section class="container py-10">
    <BlogHeader title={`Posts by ${category}`} description={`Posts by ${category}`} />
    <div
      class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-6 gap-y-9 md:gap-y-16 lg:gap-x-8"
    >
      {
        posts.map((post) => {
          return <BlogCard entry={post} />
        })
      }
    </div>
    <div class="mt-6">
      <PaginationComponent
        currentPage={page.currentPage}
        totalPages={page.lastPage}
        baseUrl="/blog/category"
        suffix={`/${category}`}
        client:load
      />
    </div>
  </section>
</MainLayout>
