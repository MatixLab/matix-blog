---
import type { CollectionEntry } from 'astro:content'
import { WeeklyFilter } from '@/components/mobile/WeeklyFilter'
import MainLayout from '@/layouts/MainLayout.astro'
import { getWeeklys } from '@/lib/fetchers'
import { cn, formatSimpleDate } from '@/lib/utils'
import { domAnimation, LazyMotion } from 'framer-motion'

type Props = {
  type: 'all' | 'year'
}
const { type } = Astro.props

let weeklyData: CollectionEntry<'weekly'>[] = await getWeeklys()

const allYears = new Set<string>()

weeklyData.forEach((ele) => {
  const year = ele.id.substring(0, 4)
  allYears.add(year)
})

const { year: currentYear } = Astro.params
if (type === 'year') {
  if (currentYear) {
    weeklyData = weeklyData.filter((ele) => {
      return ele.id.substring(0, 4) === currentYear
    })
  }
}

const weeklys: {
  [prop: string]: CollectionEntry<'weekly'>[]
} = {}

weeklyData.forEach((ele) => {
  const year = ele.id.substring(0, 4)
  if (!weeklys[year])
    weeklys[year] = []
  weeklys[year].push(ele)
})


const years = Object.keys(weeklys).sort((a, b) => {
  return Number(b) - Number(a)
})

const sortedYears = Array.from(allYears).sort((a, b) => {
  return Number(b) - Number(a)
})

// set current year
let currYear = new Date().getFullYear().toString()
if (!Astro.url.pathname.endsWith('/weekly')) {
  currYear = Astro.url.pathname.split('/')[2]
}
else if (!allYears.has(currYear)) {
  currYear = years[0]
}
---

<MainLayout
  title="Weekly"
  description="Anthony's weekly"
>
  <section class="container max-w-[980px] relative flex w-full flex-col">
    <main class="grid grid-cols-1 gap-2 md:gap-4 md:grid-cols-4">
      <div class="md:col-span-1 rounded-lg hidden md:block">
        <aside class="hidden md:block fixed">
          <ul class="group pt-12">
            {
              sortedYears.map((item) => {
                return (
                  <li class={cn(
                    'group/list-item group-hover:text-gray-300 dark:group-hover:text-ds-gray-700 text-ds-gray-800',
                    'text-end h-8',
                  )}
                  >
                      <a
                        href={`/weekly/${item}`}
                        class={cn(
                          'block w-full text-sm py-1',
                          'group-hover/list-item:text-ds-gray-1000 dark:group-hover/list-item:text-gray-100',
                          (currentYear === item) && ' text-black',
                        )}
                      >
                        {item}
                      </a>
                  </li>
                )
              })
            }
          </ul>
        </aside>
      </div>
      <div class="pt-4 md:hidden w-full">
        <WeeklyFilter
          years={sortedYears}
          currentYear={currYear}
          client:load
          slot="mobile-nav-header"
        />
      </div>

      <div class="md:col-span-3 overflow-auto pt-2 md:pt-8">
        <div class="max-w-3xl relative flex w-full flex-col space-y-4">
          <div class="flex-1">
            <LazyMotion features={domAnimation}>
              <div class="text-sm">
                <div class="grid grid-cols-6 py-2 font-medium text-ds-gray-800">
                  <span class="col-span-1 hidden text-center md:grid">Year</span>
                  <span class="col-span-6 md:col-span-5">
                    <span class="grid grid-cols-4 items-center md:grid-cols-8">
                      <span class="col-span-1 text-center">Date</span>
                      <span class="col-span-2 md:col-span-6 text-center">Title</span>
                    </span>
                  </span>
                </div>

                <div class="group/list-wrapper">
                  {
                    years.map((year: string) => {
                      const postsData = weeklys[year]
                      return (
                        <ul class="group/list list-none">
                          {
                            postsData.map((item, itemIndex) => {
                              return (
                                <li class="group/list-item grid grid-cols-6 p-0 group-hover/list-wrapper:text-gray-300">
                                  <span
                                    class={cn(
                                      'pointer-events-none col-span-1 hidden items-center tabular-nums transition-colors duration-300',
                                      ' group-hover/list:text-gray-900 dark:group-hover/list:text-ds-gray-500 md:grid text-center',
                                      itemIndex === 0 && 'border-t border-gray-200',
                                    )}
                                  >
                                    {itemIndex === 0 ? year : ''}
                                  </span>
                                  <a
                                    href={`/weekly/${item.id}`}
                                    class={cn(
                                      'col-span-6 md:col-span-5',
                                      'dark:group-hover/list-item:text-ds-gray-500 group-hover/list-item:text-gray-900',
                                    )}
                                  >
                                    <span class="grid grid-cols-4 items-center gap-2 border-t border-gray-200 py-4 md:grid-cols-8">
                                      <span class="col-span-1 text-center tabular-nums">
                                        <time
                                          datetime={item.data.pubDate.toDateString()}
                                          class="hidden md:block"
                                        >
                                          {formatSimpleDate(item.data.pubDate)}
                                        </time>
                                        <time
                                          datetime={item.data.pubDate.toDateString()}
                                          class="md:hidden"
                                        >
                                          {formatSimpleDate(item.data.pubDate)}
                                        </time>
                                      </span>

                                      {/* size:md */}
                                      <span
                                        class="col-span-2 line-clamp-4 md:col-span-6 hidden md:grid  text-center"
                                        transition:name={`title-${item.id}`}
                                      >
                                        {item.data.title}
                                      </span>

                                      {/* mobile */}
                                      <span
                                        class="col-span-2 line-clamp-4 md:col-span-6 grid md:hidden  text-center"
                                        transition:name={`title-${item.id}`}
                                      >
                                        {item.data.title}
                                      </span>
                                    </span>
                                  </a>
                                </li>
                              )
                            })
                          }
                        </ul>
                      )
                    })
                  }
                </div>
              </div>
            </LazyMotion>
          </div>
        </div>
      </div>
    </main>
  </section>
</MainLayout>

<style>
  .scrollable-area {
    @apply h-full overflow-y-auto overflow-x-hidden;
  }
</style>
